// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5a\xff\x6f\xe3\xb6\x15\xff\xfd\xfe\x0a\x56\x77\x43\x1c\x34\x96\x9c\x5c\x6e\x68\x1d\xdb\xc5\xd6\x76\xd8\x06\xac\x57\xe0\xae\x3f\x0c\xc5\x10\xd0\x12\x1d\xf3\x42\x89\x9a\x48\xd9\x49\xdb\xfc\xef\x7b\x24\x25\x8a\xa4\x24\xdb\xd9\xf5\xba\x0e\x01\x62\x99\x7c\x7c\xef\xc3\xf7\x8d\xef\x51\x5e\x7c\xf6\xcd\xdb\xaf\xdf\xff\xf3\xfb\x6f\xd1\x56\xe6\x6c\xf5\x62\x61\x3e\x10\x5a\x6c\x09\xce\xd4\x03\x3c\xe6\x44\x62\x54\xe0\x9c\x2c\xa3\x1d\x25\xfb\x92\x57\x32\x42\x29\x2f\x24\x29\xe4\x32\xda\xd3\x4c\x6e\x97\x19\xd9\xd1\x94\x4c\xf5\x97\x0b\x44\x0b\x2a\x29\x66\x53\x91\x62\x46\x96\x97\xf1\xec\x02\xe5\xf8\x81\xe6\x75\xee\x0e\xd5\x82\x54\xfa\x3b\x5e\xc3\x50\xc1\x23\x94\xf4\x25\xe2\xb2\x64\x64\x9a\xf3\x35\x85\x8f\x3d\x59\x4f\x61\x60\x9a\xe2\x52\xad\x71\x50\x3c\x12\xd1\x2d\x67\xb4\xb8\x47\xdb\x8a\x6c\x96\xd1\x56\xca\x72\x9e\x24\x20\x3d\xcd\x8a\x78\xcd\xb9\x14\xb2\xc2\xa5\xfa\x92\xf2\x3c\xd9\xc0\xfa\x29\xde\x13\xc1\x73\x92\x5c\xc7\x57\xf1\x2c\x49\x85\xf0\x86\xe3\x9c\x02\xad\x00\xf6\x15\x61\xcb\x48\xc8\x47\x46\xc4\x96\x10\xd9\xc9\x13\x69\x45\x4b\x89\xe4\x63\x09\x80\x25\x79\x90\xc9\x07\xbc\xc3\x66\x34\x42\xa2\x4a\x0d\x0e\x01\x40\x52\x9e\x91\xf8\xc3\xbf\x6b\x52\x3d\x6a\x00\xe6\x71\x7a\x15\x5f\xc2\x9f\x92\xf4\x41\x44\xab\x45\x62\xd6\x36\xec\x25\x95\x8c\xac\x78\xfe\x50\x91\x9c\x4b\xb2\x48\xcc\x80\xb2\x52\xd2\x9a\x69\xa1\x71\x99\x05\xca\x86\xe8\x67\xfd\x08\x5f\x08\xbd\xdb\xca\x39\xba\x9c\xcd\xfe\x70\xa3\xc7\x9e\x5e\xe8\x8f\x35\xcf\x1e\x2d\x55\x89\xb3\x8c\x16\x77\x73\x34\x2b\x1f\x6e\x9a\xb1\x1c\x57\x77\xb4\xf0\x86\xfa\xcc\x10\xd2\xba\xda\xe0\x9c\xb2\xc7\x39\xfa\x2b\x61\x3b\x22\x69\x8a\xdb\xd9\x35\x4e\xef\xef\x2a\x5e\x17\xd9\x1c\xbd\xdc\x6c\x36\xed\x78\xca\x19\xaf\x60\x68\x36\x9b\x79\xa8\x68\xbc\xc1\xd3\x92\xe1\x1e\xb4\x29\x23\x1b\x90\xfc\x45\x0b\xa6\xa1\x8f\xd7\xb5\x94\xbc\xb0\xd4\x69\x5d\x09\xc5\xb8\xe4\x14\x3c\xa3\x0a\xc5\x5d\x5f\x5f\x0f\x2d\x8f\x71\x2a\xe9\x8e\x74\x5c\x3a\x74\xe8\x33\x9a\x2b\x8f\xc7\x85\x0c\x56\x56\x7c\x2f\xba\x25\x19\x15\x0a\xf6\x1c\x15\xbc\x20\xad\xd8\x9f\xa6\xb4\xc8\xc8\x03\x28\x6c\x70\x6d\xcd\x9e\x67\x80\xfe\x72\x46\x9f\x6b\x42\x46\x85\x9c\x6a\x67\x99\x2a\x7f\xf5\xf1\x76\x93\xe1\x78\x41\xa6\xd6\xf8\xf1\x1b\x92\x5b\xfb\xf2\x2a\x83\x28\x5e\x73\x50\x63\x0e\x73\xe5\x03\x12\x9c\xd1\x0c\xbd\x24\xc4\x2e\xb7\xd0\x2e\xaf\x60\xfe\x8b\x0e\x8c\xf6\x1d\x41\x7f\x22\x8a\xeb\x65\xcb\x75\x70\x9b\x74\xc8\x38\xfe\x3e\xa7\x95\x01\x78\xdd\x09\xb0\x56\xa1\x85\xde\xc3\x9a\xf1\xf4\xbe\x9d\xd4\xc9\x6a\x8e\xae\x1c\xed\xa8\xe0\x9d\x62\x46\xef\x40\x69\x29\xe9\x3c\x68\x10\x12\xb6\x90\xf4\xb2\x8c\xa4\xbc\xc2\x92\xf2\xc2\x57\xde\x00\xde\xfd\x96\x4a\x32\x15\x25\x4e\xb5\xa2\xf7\x90\x91\xda\x29\xbe\x23\xd5\x86\xf1\xfd\x1c\x6d\x69\x96\x91\xc2\x43\xd6\x4d\x12\xc6\x68\x29\xa8\xe8\x6d\xd4\xd9\x61\x0b\x5a\x25\xc9\x8a\x33\x71\xd8\x57\x4b\x2e\xa8\x01\x0f\x79\x0e\xab\x70\x08\xf4\xe4\x06\xfd\x50\x22\xb0\xce\x7e\x35\x22\xde\xf1\x55\x2b\x0b\xaf\xc1\x5d\x6a\x69\x65\x49\x5e\xce\xd1\x1b\x60\x8a\x4c\xbc\xbf\xe9\xf8\xab\xec\x7f\x4f\xe5\x14\xf2\x77\x21\x36\xbc\x02\x77\xd3\x8f\x00\x96\x4c\xa6\x40\x78\x81\xd4\xff\xf3\x11\xe9\x71\x45\xf6\x00\x70\x00\xc3\x86\x3e\x90\xcc\x03\x30\x0b\xf7\x79\xd5\xc1\xe8\x69\x63\x54\x52\x98\x9b\x8e\x6a\xf8\xcd\x61\x05\x83\xe5\x31\x0c\x29\xc5\x1c\xf3\x57\x2f\xb4\xae\xdc\x70\x7d\x50\x83\x3a\x18\x6d\xe8\x3e\x1c\x0f\xe6\xf5\x7a\x3d\x98\xd1\x6d\x90\x1f\x50\x02\xd0\xef\x71\x95\xc1\x19\x21\xa4\xd5\x45\x23\xaa\x89\xd8\xd9\x80\xa4\x71\x8e\x60\xfb\x51\x86\xc6\x6b\x86\x90\xf7\xf9\xed\xc0\xf3\x72\x72\xcc\x21\x5a\x6d\x7c\xa4\x4f\x34\xc2\x7e\x2f\x3e\xf1\xfa\x99\x3e\xa1\xc3\xe2\xe3\x1c\xa2\xd5\x80\xf9\x9c\xd6\xe5\xb0\xed\x4e\xf3\x85\x80\x59\xc6\xf7\xc5\x88\x6f\x9d\xe6\x0b\x39\xa6\x43\x46\xe9\xa7\x06\xc7\xea\xad\x67\x3c\xcf\x11\xb4\xa4\xd8\x2f\x71\x3e\x7d\x3a\xec\xbc\x07\xd7\x92\x07\x70\xaf\xdd\x3d\x19\xdd\xe1\x8c\xd6\xc2\x77\x35\x5b\x4c\x78\x2c\x06\xbc\x0d\xf5\xdd\xed\x3a\x70\xb7\x2d\xce\xd4\x29\x46\x0b\x41\x24\x30\x54\x7f\xaf\xc1\x4e\xee\x19\x39\x56\x21\x0e\xaa\x72\xbe\x26\xa0\x82\x81\x6a\xcc\x3b\xf0\x9b\x6e\x61\x8e\xce\xd0\x59\x50\x9b\x34\x0e\x7e\xd4\x6e\x6d\x36\xfb\x94\xb6\xbb\xba\x7c\xf3\x0c\xe3\x5d\x7d\x72\xe3\x85\xe7\xc7\xaf\x69\x3c\xab\xcf\x5e\x21\xdb\xc6\x6f\xaf\xe2\x0f\x59\x34\xc7\xc1\x27\xb4\xc8\xe5\xff\xd2\x20\xbf\xad\x3d\x5a\x65\xf6\xcd\x61\x54\xf6\xc7\x13\xad\xd1\x04\xe4\xc5\x61\xab\xff\x66\x61\x2b\xea\xb5\x6e\x9a\xc5\xa9\x5e\xa2\x9b\x02\x54\xb5\x27\x7d\xbf\x05\x3e\x6c\xf8\x8f\x09\x37\xaf\xbf\x72\x97\x68\x34\xa1\x45\xbf\xfc\xf2\xcb\x23\x5b\x87\xfd\x3c\x6f\xd7\xc6\xd2\xbf\x93\x4d\xbb\x95\xcd\xc9\x7b\xa6\xc5\x86\x9f\xb0\xe7\xee\x00\x77\xfa\xe3\xff\x9b\xcd\x0f\xf6\x71\xad\x46\x72\xbe\xa3\x47\x2e\x27\x7e\xbd\x86\xef\x75\x97\x68\x86\xef\x7b\x7c\x54\x31\xcd\xf1\x5d\x0b\xee\x49\xff\x1f\x98\xa6\xf9\x9d\xc5\x3f\x5a\x56\x35\x2b\x32\x22\x31\x75\x1a\x5c\x7b\xe1\x70\xd5\xbb\x3b\x09\x56\xc4\x3a\x2d\xd8\x85\x6e\x85\x3c\x0b\xee\x29\xf6\x8d\x0a\xd6\x9c\x65\xbe\xd5\x6d\xc7\xd4\x3b\xab\x1a\x69\xfa\x63\x9a\x32\x3e\x74\x61\xe4\xe5\x3a\x4f\x7f\x8e\xa9\x5b\xeb\x3b\x57\x68\x47\xce\x8a\x03\x70\xbb\x58\x6f\x9d\xde\xbd\xdf\xb9\x0e\xef\x43\xc6\x2e\x36\x82\xd3\xed\xda\xdb\xfc\x22\xb1\x37\x92\x0b\x75\xd5\xd8\xdc\x65\x66\x74\x87\x52\x86\x85\x58\x46\xe6\x2e\x25\x5a\x35\xdc\x16\x35\x5b\x2d\x92\x9a\x35\x84\x09\x50\xae\x5e\xf4\x16\xb5\x91\xde\x2d\x73\x26\x4d\x83\x68\xa7\x02\x71\xa6\xf1\x52\x37\x7d\xf0\xe1\x75\xa5\x11\xca\xb0\xc4\xcb\x48\x10\x72\x7f\xab\x66\x6e\xf5\xe8\x6a\x41\xdb\xc5\x1b\x8c\x36\x58\xd3\x4e\xdb\x95\xea\x9a\x96\xae\x1a\x9c\xc7\x05\xba\x4d\xab\x27\xaf\x99\x38\x24\xb2\x21\x71\x25\x36\xf2\x5a\x25\xb8\x28\x5c\x0c\x2a\x1d\x8e\xe8\xa3\x3b\x12\x0d\x42\x0b\xaa\x1d\x8f\x56\xef\x7e\xf8\xf3\xbb\x03\x1b\x54\x27\x0b\x10\xbd\x7f\xfb\xfd\x01\x22\x95\x8a\xa3\xd5\xdf\xbe\xfb\xcb\xdb\x93\x55\x65\x35\x1c\x9a\xa5\xaf\x9e\x21\x63\x58\xad\x9c\x60\x8e\x21\x4b\x0c\x18\xa1\xaf\xff\x13\x44\xa8\xe8\x6e\xf9\x97\xb8\x06\x57\x47\x34\x5b\x46\x8d\xb6\x7b\x42\x0c\x49\x5f\xc4\xa8\x6d\x4d\xeb\x7b\x92\xb7\xeb\xf6\xd8\x69\x95\x5b\x58\x66\xe8\x56\x0f\xf5\x00\xb9\xf4\xcf\xdb\x39\xb4\xf6\xb6\xc9\x0f\x44\xc1\xc0\x98\x20\x3d\x75\x60\xf7\x63\x29\x41\x27\xd7\xc1\x7c\xa0\x0f\x12\x25\x0f\x8e\x12\xfd\x16\x46\xbd\xb2\x19\xd5\x67\x73\x24\x8c\x28\x54\xc7\x44\x74\x48\x07\x19\x31\x6f\x6d\x8c\x75\x03\x3a\xdc\xbc\x8f\x7a\x19\x79\xb0\xcd\x99\x10\xad\xbe\x56\x1f\x8b\x04\x1f\xdb\xf6\xc1\x37\x4d\xed\xe2\x1d\xae\xb4\xf3\x91\xea\x9d\xc4\xb2\x16\x68\x89\x8a\x9a\xb1\x9b\x17\xed\xf1\x50\x17\xc6\x4e\x29\xcf\x73\x5c\x64\x13\xf5\xa6\xed\xdc\x1e\x4c\x08\xbd\x8a\xef\x88\xfc\xfb\xbb\xb7\xdf\x4d\xa2\xa4\xa1\x49\x22\xf4\xb9\x7e\x23\x77\x81\x7e\x7e\xba\xb0\x2c\x26\x15\x11\xa5\xbb\x54\x57\xeb\x50\x65\x91\x98\xf1\x3b\x33\x7b\x63\x27\x9f\xec\xf3\x53\x0f\x8b\x02\x3c\x29\xb1\xdc\x8e\x01\xd1\xe1\x04\xd2\xd1\x86\xaa\xd7\x13\x8a\x14\x1d\x46\x42\x37\x48\x8f\x42\xf5\x9f\xa6\x44\x08\x7f\x16\x81\x9b\x82\x6b\x12\xa3\xa3\x89\x03\xb3\x2d\x4a\x8e\x41\x36\x07\x58\x1f\xf4\x24\xaa\x59\x74\x1e\xab\xd7\x70\x93\x28\x3a\xb7\x7a\x47\x06\xf4\xd2\x7c\xfc\xf2\x0b\x8a\x22\x67\xce\xdd\x6b\x73\x34\xaa\xdd\x2a\xda\x93\x76\x9b\x24\xe8\x4f\x59\x06\xb5\x9c\xac\x2b\x93\x43\x11\x61\x24\x87\xc2\x40\x29\x62\x4f\x10\xd4\x14\xa4\x42\x18\x78\x55\x6a\x30\xa3\x15\x49\x25\xaf\x1e\x03\x8d\x69\x51\x9f\x2d\x01\x5c\xa8\x2f\x2a\x49\x2e\xf4\x93\xd9\x42\x0c\x05\x0c\x95\x00\x17\xf6\x68\x26\xe3\x92\x97\xbe\x26\x4d\x45\x73\xdb\x6c\xdc\x10\x7d\xe0\xb4\x30\xab\x5e\x78\x94\xa0\xb8\x05\x83\xf8\x6f\x62\xe5\xec\xe5\x99\xc9\x1d\x67\xca\xf7\x3a\x36\x9f\xa3\xe8\xac\xcb\x21\x67\x26\x87\x30\xb2\x23\x0c\x52\xc8\x99\x4e\x21\x9a\x5a\x85\xd3\x22\x01\x86\x60\x0b\x5c\x96\xa4\xc8\xde\xf3\x49\xd4\xbd\xc2\x89\x02\x93\x3b\x5f\x20\xe1\xa3\x09\x85\x8e\x1a\xf5\xf5\x8c\xb4\x03\xc2\x66\xd4\xd4\x8f\xf4\x5f\xfe\x6e\x55\x88\xc0\x9c\x22\x89\xd5\x3f\xf5\x3d\xd8\xe6\x61\x25\x5b\x16\xed\x5e\x6d\xe4\xf9\x82\x9e\x7c\xa6\x60\xfd\x6f\xa9\xdc\x6a\x03\x6b\x7c\x5c\x3d\x0d\xd9\xd8\xe4\x07\xa5\xd8\x5b\x95\x46\x5a\xb0\x96\x14\x7d\x85\x22\xf8\x12\xa1\x39\x8a\xd4\x4c\x74\xd3\x5b\x9c\x0a\x71\xab\xb5\x3f\xb8\x58\x1f\x98\x0c\x7c\xcd\xb0\x80\x6f\x94\xe5\x03\x5c\x94\x91\x81\x01\xa4\xc4\x01\x05\x39\xf8\x96\x0d\x8e\xbe\xa6\x5a\x0e\x89\x20\xd5\x8e\x7c\xa5\xa8\x96\x27\x69\x2b\xf4\x34\xb5\x48\x33\x53\xbe\xa5\x75\xa3\x5f\x8e\x9a\x89\x0e\x8a\x9d\x35\x13\xda\x50\x7d\x6f\x54\x53\x9d\x86\xcc\xbc\xf2\x49\x35\xee\xf9\x85\x9a\x7b\xae\x93\xda\xa7\x03\x79\xc9\xcf\x6b\x23\xe9\x54\xe8\xe9\xe8\x68\x3a\x0f\x0e\x12\x45\xe0\x99\xcb\x26\xd9\xaa\x2e\x0a\xe8\xb9\x42\x2b\xbd\xb2\xbb\x51\x29\x91\x66\x24\xcc\x0f\x8a\xc0\x56\xf5\xe7\xb1\xd8\xf2\xfd\x24\xcc\x0c\x56\x88\xcc\xb3\xf5\x2d\x2e\xe9\xed\x3d\x79\x1c\x8b\x1f\xc5\x50\x57\x9d\x1d\x33\xdf\x15\x86\x9f\x09\x73\x9a\xb3\x01\xec\x43\xbc\x02\xec\x43\xdb\x6b\x0e\x89\xff\xc2\x8c\x4d\x83\xf8\x0f\x55\x27\xe8\x78\x70\xb7\xaa\x02\x48\x97\x37\x3f\x54\x4c\x85\x40\xfb\xfb\x12\x3d\xa6\xd5\x14\xf3\xea\x2e\x91\x49\x99\xec\xa1\x3d\x4f\x5a\x47\x86\x0c\x2d\xa0\x53\xd4\x99\xd4\x3d\x7c\x60\x23\xa6\x57\x85\x5a\x49\xb9\xa2\x94\xd5\x24\x82\x9a\x09\x1c\xa4\x15\xe3\x6c\xa1\x23\x37\xfd\x33\xac\x50\xc5\x88\x46\x09\x72\x29\x34\x99\x98\xdd\xea\xa9\xe1\x55\x6e\xad\xe4\xad\xdd\x41\x24\x53\xb2\x3f\x0f\xb0\x1d\x50\xb2\xe5\xda\xb3\x51\x5f\xa5\xe0\xfe\x46\x9d\x34\xbb\x40\x39\xc9\xa8\x09\xec\x50\xb1\x70\x42\xe2\x5c\x79\xbb\xeb\x0e\x8d\xd7\xcd\xbd\x88\xf0\x1c\xb2\xb3\xea\xf0\xb1\xde\xda\x08\xc8\x63\x48\xd5\x1a\x74\x63\xa7\xd7\xda\x40\x1d\x22\x9b\xf8\x15\x50\x03\xe7\x60\x94\x7a\xbe\xf2\x8c\xaa\x4b\x10\x5c\xa5\x5b\xb3\x2c\xac\x02\x3f\x42\x13\x17\x0e\xb5\xfe\x81\xd3\x5c\x27\xcb\x8f\x52\x90\x81\x9a\xe4\x35\x93\x34\x3a\x49\x29\x5d\xd6\xe0\x12\xdc\x11\x1e\x61\xad\x40\x2b\x34\x1b\xaa\x6c\x9a\xe4\x16\x37\x64\x3f\xce\x82\x93\xbd\xf3\x1d\x20\x8e\x95\x5d\xf4\x83\xe3\x45\x27\x87\xf8\xab\x89\x45\xed\x22\x09\xeb\x51\xcf\xc5\x75\xb3\x7d\x1e\xc3\x92\x28\x65\x14\x7a\x61\x67\xeb\x61\x01\x6e\xaa\x7a\xd3\x9f\x7b\xa8\xd4\xf5\x08\xdf\x43\x69\x9e\xea\xeb\x1c\xd8\x2b\xe3\x38\x9b\x04\xce\xe2\xc9\x6d\xda\xd5\x67\x49\x7e\x35\x91\x5b\x2a\xda\x2c\xa2\x02\x3b\x3a\xf7\x70\xb4\x04\xea\x07\x6d\x3b\xf2\xb5\x3a\x28\x27\x91\xf9\x0d\x56\x50\x15\x2a\x1b\xb6\xd4\x5b\x2c\x1a\x52\xdd\x0b\x9c\x87\x56\x24\x2a\x13\xb6\xc4\x1b\xaa\x54\x40\x7b\x45\xa6\x62\x48\x98\xc3\xab\xf9\xbd\x59\x9f\x9d\x62\xe8\x23\xb4\xa4\x31\xce\x32\x67\x4c\x77\xee\x07\x8e\x99\xc1\xc3\x65\x98\xbd\x61\x15\xf0\xd7\x32\x4f\x39\xc5\x7a\xd6\x6b\xce\xc1\x13\x6c\xe7\x66\x02\x2f\xae\x75\x5a\x38\xe0\x20\x6e\x1f\x7b\x92\x24\x37\x61\xf7\x4f\xcc\x91\x72\xa0\x13\xef\x4b\x37\x17\x0f\x8d\x60\xc9\xeb\x74\x0b\x85\x4d\x25\x51\xce\x41\x91\xfa\xea\xe2\x00\x8e\xc6\x4b\xad\xae\x3b\x0f\x1c\xdd\x6d\x5f\x1e\x94\x6c\x48\x3f\xa4\xb8\x48\xc1\x05\xb5\xe4\xba\x3c\x2e\x77\xc4\xf9\xc7\x44\xab\x4b\xd4\x40\xc1\x11\x76\xa5\x10\x5f\x0c\x89\xcb\x0a\x9a\xa2\x42\x7e\x43\x36\x18\x32\x5a\x50\x54\x99\xec\xae\xbb\xb2\xa1\x70\xbd\x09\x48\x9b\x56\xa1\x4f\xaa\x0b\xe5\x81\xa0\x3d\x5c\xbb\x77\xdd\xfe\x70\xd2\x1c\x8c\x18\xb7\xdf\x3e\x9a\x6b\x9b\x27\xf7\xa7\xb4\x8b\xc4\x5c\x44\x2f\x12\xfd\x2b\xe7\xff\x04\x00\x00\xff\xff\x03\xd9\x7c\xb4\xfc\x2c\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 11516, mode: os.FileMode(420), modTime: time.Unix(1497814906, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x5a\x6d\x6f\xe4\xb6\x11\xfe\xee\x5f\xc1\xe8\xae\xf0\x1a\xb1\xa4\xb5\x63\x17\xb9\xf5\xae\x83\x36\x09\x50\xf4\x43\x2f\xc0\x5d\x3f\x14\x45\x61\x70\xa5\x59\x2f\xcf\x94\xa8\x92\xd4\xae\x9d\xc4\xff\xbd\x43\x52\xa2\x5e\xf7\x0d\xd7\x4b\x53\x1c\x70\x2b\x91\xc3\x99\x67\x66\x1e\x0e\x5f\xe4\xf9\x57\x3f\xbc\xff\xfe\xe3\x3f\x7e\xfa\x91\xac\x75\xc6\xef\xcf\xe6\xee\x87\x90\xf9\x1a\x68\x6a\x1e\xf0\x31\x03\x4d\x49\x4e\x33\x58\x04\x1b\x06\xdb\x42\x48\x1d\x90\x44\xe4\x1a\x72\xbd\x08\xb6\x2c\xd5\xeb\x45\x0a\x1b\x96\x40\x68\x5f\x2e\x09\xcb\x99\x66\x94\x87\x2a\xa1\x1c\x16\x57\xd1\xf4\x92\x64\xf4\x99\x65\x65\xd6\x6e\x2a\x15\x48\xfb\x4e\x97\xd8\x94\x8b\x80\xc4\x43\x8b\xb4\x28\x38\x84\x99\x58\x32\xfc\xd9\xc2\x32\xc4\x86\x30\xa1\x85\x19\xd3\x42\xf1\x02\xaa\x19\xce\x59\xfe\x44\xd6\x12\x56\x8b\x60\xad\x75\x31\x8b\x63\xb4\x9e\xa4\x79\xb4\x14\x42\x2b\x2d\x69\x61\x5e\x12\x91\xc5\x2b\x1c\x1f\xd2\x2d\x28\x91\x41\x7c\x13\x5d\x47\xd3\x38\x51\xaa\xd3\x1c\x65\x0c\x65\x15\xaa\x97\xc0\x17\x81\xd2\x2f\x1c\xd4\x1a\x40\x37\xf6\x54\x22\x59\xa1\x89\x7e\x29\x10\xb0\x86\x67\x1d\x7f\xa2\x1b\xea\x5a\x03\xa2\x64\xe2\x70\x28\x04\x92\x88\x14\xa2\x4f\xff\x2e\x41\xbe\x58\x00\xee\x31\xbc\x8e\xae\xf0\x9f\xb1\xf4\x49\x05\xf7\xf3\xd8\x8d\xad\xd4\x6b\xa6\x39\xdc\x8b\xec\x59\x42\x26\x34\xcc\x63\xd7\x60\xb2\x14\xd7\x69\x9a\x5b\x5c\x6e\x80\xc9\x21\xf9\xc5\x3e\xe2\x0b\xb0\xc7\xb5\x9e\x91\xab\xe9\xf4\x0f\x77\xb6\xed\xf5\xcc\xfe\x2c\x45\xfa\xe2\xa5\x0a\x9a\xa6\x2c\x7f\x9c\x91\x69\xf1\x7c\x57\xb5\x65\x54\x3e\xb2\xbc\xd3\x34\x54\x46\x88\x8d\xd5\x8a\x66\x8c\xbf\xcc\xc8\x5f\x80\x6f\x40\xb3\x84\xd6\xbd\x4b\x9a\x3c\x3d\x4a\x51\xe6\xe9\x8c\xbc\x59\xad\x56\x75\x7b\x22\xb8\x90\xd8\x34\x9d\x4e\x3b\xa8\x58\xb4\xa2\x61\xc1\xe9\x00\x5a\xc8\x61\x85\x96\xbf\xad\xc1\x54\xf2\xd1\xb2\xd4\x5a\xe4\x5e\x3a\x29\xa5\x32\x8a\x0b\xc1\x90\x19\xb2\x6f\xee\xe6\xe6\x66\x6c\x78\x44\x13\xcd\x36\xd0\x68\x69\xd0\x91\xaf\x58\x66\x18\x4f\x73\xdd\x1b\x29\xc5\x56\x35\x43\x52\xa6\x0c\xec\x19\xc9\x45\x0e\xb5\xd9\x9f\x43\x96\xa7\xf0\x8c\x01\x1b\x1d\x5b\xf2\xd3\x12\x30\x1c\xce\xd9\xa9\x29\xe4\x4c\xe9\xd0\x92\x25\x34\x7c\xed\xe2\x6d\x3a\xfb\xed\x39\x84\x3e\xf9\xd1\x2d\x64\x3e\xbf\x42\xa6\x38\x8b\x97\x02\xc3\x98\x61\x5f\xf1\x4c\x94\xe0\x2c\x25\x6f\x00\xfc\x70\x0f\xed\xea\x1a\xfb\xbf\x6d\xc0\x58\xee\x28\xf6\x33\x18\xad\x57\xb5\xd6\x51\x37\xd9\x58\x72\xba\x7e\x86\xd2\x01\xbc\x69\x0c\xf8\xac\xb0\xdc\xfa\xb0\xe4\x22\x79\xaa\x3b\x6d\xb1\x9a\x91\xeb\x56\x74\xcc\xe4\x0d\x29\x67\x8f\x18\xb4\x04\x1a\x06\x8d\x42\xa2\x1e\x92\x1d\x96\x42\x22\x24\xd5\x4c\xe4\xdd\xe0\x8d\xe0\xdd\xae\x99\x86\x50\x15\x34\xb1\x81\xde\x62\x45\xaa\xbb\xc4\x06\xe4\x8a\x8b\xed\x8c\xac\x59\x9a\x42\xde\x41\xd6\x74\x02\xe7\xac\x50\x4c\x0d\x1c\x6d\x79\x58\x83\x36\x45\x52\x0a\xae\xf6\x73\xb5\x10\x8a\x39\xf0\x58\xe7\xa8\x99\x0e\xbd\x38\xb5\x27\xfd\x58\x21\xf0\x64\xbf\xde\x61\xbe\xc5\x55\x6f\x8b\x2e\x91\x2e\xa5\xf6\xb6\xb4\x28\x66\xe4\x16\x95\x12\x37\xdf\x6f\x1b\xfd\xa6\xfa\x3f\x31\x1d\x62\xfd\xce\xd5\x4a\x48\xa4\x9b\x7d\x44\xb0\x30\x09\x51\xf0\x92\x98\xff\x2f\x76\x58\x8f\x24\x6c\x11\xe0\x08\x86\x15\x7b\x86\xb4\x03\x60\xda\xf7\xf3\xba\x81\x31\x88\xc6\x4e\x4b\xfd\xda\x74\x30\xc2\xb7\xfb\x03\x8c\x99\xa7\xd8\x64\x02\x73\x88\xaf\x9d\xa9\x75\xdd\x9e\xae\xcf\xa6\xd1\x4e\x46\x3f\x75\x9f\x0f\x4f\xe6\xe5\x72\x39\x5a\xd1\xfd\x24\xdf\x13\x04\x94\xdf\x52\x99\xe2\x1a\xa1\xb4\x8f\x45\x65\xaa\x9a\xb1\xd3\x11\x4b\xbb\x35\x62\xee\x77\x2a\x74\xac\x19\x43\x3e\xd4\xb7\x41\xe6\x65\x70\x88\x10\x75\x34\x3e\x93\x13\x95\xb1\xdf\x0b\x27\xbe\x39\x91\x13\x76\x5a\x7c\x1e\x21\xea\x08\xb8\xdf\xb0\x2c\xc6\x73\x77\x1c\x17\x7a\xca\x52\xb1\xcd\x77\x70\xeb\x38\x2e\x64\x94\x8d\x25\x65\x58\x1a\x5a\x59\xaf\x99\x71\x1a\x11\xac\xa5\xa8\xbb\xc5\xf9\xf2\xe5\xb0\x61\x0f\x2d\xb5\xe8\xc1\xbd\x69\xfb\xe4\x62\x47\x53\x56\xaa\x2e\xd5\xfc\x66\xa2\xa3\x62\x84\x6d\x64\x48\xb7\x9b\x1e\xdd\xd6\x34\x35\xab\x18\xcb\x15\x68\x54\x68\xfe\x7d\x83\x79\x6a\xaf\x91\xbb\x76\x88\xa3\xa1\x9c\x2d\x01\x43\x30\xb2\x1b\xeb\x2c\xf8\xd5\x69\x61\x46\xce\xc9\x79\x6f\x6f\x52\x11\xfc\x60\xde\xea\x6a\xf6\x25\x73\x77\x7d\x75\x7b\x42\xf2\xae\xbf\x78\xf2\xfa\xeb\xc7\x7f\x33\x79\x3e\x9e\x83\x8d\x6c\x3d\x7f\x07\x3b\xfe\xbe\x8a\x6a\x39\xf8\x82\x19\xb9\xfa\x5f\x26\xe4\xb7\xcd\x47\x1d\xcc\x61\x3a\x5c\xc8\xfe\x78\x64\x36\xaa\x09\x79\xb9\x3f\xeb\xbf\xd9\xb4\x55\xe5\xd2\x1e\x9a\xd5\xb1\x2c\xb1\x87\x02\x22\xeb\x95\x7e\x78\x04\xde\x9f\xf8\xcf\x99\x6e\x9d\xf3\x55\x7b\x88\x45\xd3\xcf\xe8\xbb\x77\xef\x0e\xb8\x8e\xfe\x9c\xe6\xb5\xcb\xf4\xef\xc4\xe9\xf6\xce\xe6\x68\x9f\x59\xbe\x12\x47\xf8\xdc\x2c\xe0\xad\xf3\xf1\xff\x8d\xf3\xa3\xe7\xb8\xd7\x33\x73\x2b\xe4\x2f\x83\xe6\xe6\x96\xa7\xba\x46\x4a\xd9\x86\x24\x9c\x2a\xb5\x08\xdc\x31\x36\xb8\xaf\xf4\xcc\x4b\x7e\x3f\x8f\x4b\x5e\x09\xc6\x28\x79\x7f\x36\x18\x54\x07\xb9\x19\xd6\xea\x74\x7b\x73\xdf\xd5\x33\xe7\xf6\xbc\xe6\x92\x05\x7f\x3a\x07\x82\x80\xa4\x54\xd3\x45\xa0\x00\x9e\x1e\x4c\xcf\x83\x6d\xbd\x9f\xb3\x7a\xf0\x8a\x92\x15\xb5\xb2\x61\x3d\xd2\xdc\x90\xb1\xfb\x0a\xe7\x61\x83\xed\xf3\x42\xc7\x5e\xd5\xb1\xcf\x64\x25\xd2\xb6\x58\xd9\xab\x83\xd0\x46\xd1\xc6\x60\x98\xb8\x23\x1e\x4d\x35\x72\x08\x3d\xa8\xba\x3d\xb8\xff\xf0\xf7\x3f\x7f\xd8\xe3\xa0\x99\xd4\x28\xf4\xf1\xfd\x4f\x47\x47\xc1\x07\xaf\x1f\xf1\xa1\xe7\x63\x71\xf6\x0e\x1f\x11\xe9\xb1\x20\x8f\xc4\x77\x18\xda\x23\x4c\x18\xc2\xd7\xfa\x0b\x5a\x22\x8b\x09\x4b\x17\x41\x15\xc8\x81\x11\x27\x32\x34\xb1\x33\x6d\xee\x40\x71\x14\x91\xed\xa1\xa3\x75\x00\xa9\x61\xb9\xa6\x07\xdb\x34\x00\xd4\x96\x3f\xcd\x73\x3c\x30\xf9\xa3\x53\xcf\x14\x36\xec\x32\x64\xbb\xf6\x78\xdf\x99\xed\x7b\x2f\xb2\xeb\xc1\x1b\x2a\x6d\x16\x40\x7e\xd0\x54\x97\x8a\x2c\x48\x5e\x72\x7e\x77\x56\x17\xb6\x32\x77\x80\x13\x91\x65\x34\x4f\x27\xe6\x22\xff\xc2\x97\x63\x42\xde\x46\x8f\xa0\xff\xfa\xe1\xfd\xdf\x26\x41\x5c\xc9\xc4\x01\xf9\xda\x5e\xf8\x5f\x92\x5f\x5e\x2f\xbd\x8a\x89\x04\x55\xb4\x87\xda\xcd\x00\x16\x71\x88\xb8\x78\x74\xbd\x77\xbe\xf3\xd5\x3f\xbf\x0e\xb0\x18\xc0\x93\x82\xea\xf5\x2e\x20\x96\x57\x68\x1d\x8f\x7c\xe6\xf6\xd3\x88\x92\xfd\x48\xd8\x8a\xd8\x56\xdc\x5c\x24\x09\x28\xd5\xed\x25\x98\x2f\xcc\x11\xb8\x18\x4d\x5a\x30\x5d\x91\x3e\x0c\xd9\x15\xe9\x21\xe8\x49\x50\xf2\xe0\x22\x32\xb7\xfc\x93\x20\xb8\xf0\x71\x27\x0e\xf4\xc2\xfd\xfc\xfa\x2b\x09\x82\x56\x5f\xdb\xd7\xaa\xfc\x1b\x6f\x8d\xec\x51\xde\xc6\x31\xf9\x53\x9a\x12\x09\xba\x94\xae\x98\x10\xe0\x90\xe1\x9a\x66\x02\xb1\x05\x82\xe7\x7f\x90\x84\xa2\x2e\x69\x1a\x53\x26\x21\xd1\x42\xbe\xf4\x22\x66\x4d\x7d\xb5\x40\x70\xfd\x78\x31\x0d\x99\xb2\x4f\xce\x85\x08\x17\x37\xa6\x11\x2e\xfa\xe8\x3a\xa3\x42\x14\xdd\x48\xba\xdb\x87\x87\xca\x71\x27\xf4\x49\xb0\xdc\x8d\x3a\xeb\x48\x62\xe0\xe6\x1c\x27\x02\x75\x9f\x86\xce\xdf\x9c\xbb\x49\x74\x6e\xb8\xd7\xa8\xf9\x9a\x04\xe7\xcd\x64\x3a\x77\x93\x89\xc3\x06\x38\xce\xa5\x73\x3b\x97\xac\xf4\x3c\xa6\xf8\x82\x0a\x31\x17\xb4\x28\x20\x4f\x3f\x8a\x49\xd0\xdc\x10\x07\xbd\x94\xb7\x5e\xb0\xf2\x91\x09\xc3\x0d\x3b\x19\xc6\x99\x58\x02\xa2\x33\xa6\xeb\x9f\xec\x5f\x5d\x6f\xcd\x14\xc1\x3e\x23\x12\x99\xff\xcc\x7b\xcf\xcd\xfd\x41\xf6\x2a\x6a\x5f\xfd\xcc\xeb\x1a\x7a\xed\x2a\xc5\xec\xff\xc8\xf4\xda\x26\xd8\xe2\x13\xe6\x69\x2c\xc7\xae\x3e\x98\xc0\x3e\x98\x32\x52\x83\xf5\xa2\xe4\x3b\x12\xe0\x4b\x40\x66\x24\x30\x3d\xc1\xdd\x60\x70\xa2\xd4\x83\x8d\xfe\xe8\x60\xbb\x72\x70\xe4\x9a\x53\x81\x6f\x8c\x67\x23\x5a\x4c\x92\x51\x41\xf0\x26\x18\x09\x50\x0b\xdf\xa2\xc2\x31\x8c\x54\xad\x21\x56\x20\x37\xf0\x9d\x91\x5a\x1c\x15\xad\x3e\xd3\xcc\x20\xab\xcc\x70\xcb\xc6\xc6\x7e\x7b\x71\x1d\x0d\x14\xdf\xeb\x3a\x6c\xa2\x86\x6c\x34\x5d\x4d\x84\x5c\xbf\xe1\xa4\x69\xef\xf0\xc2\xf4\x9d\x4a\x52\xff\xb4\xa7\x2e\x75\xeb\xda\x8e\x72\xaa\x6c\x77\x70\xb0\x9c\xf7\x16\x12\x23\xd0\x49\x97\x2f\xb2\xb2\xcc\x73\x3c\xf0\xf5\xb3\xf4\xd6\x7b\x63\x4a\x22\x4b\xa1\x5f\x1f\x8c\x80\xdf\xb9\x5e\x44\x6a\x2d\xb6\xbb\x8a\x31\xc1\x8a\xd6\xfa\xa2\x37\x62\x60\x38\x7a\x60\x60\x0c\x43\x55\xc9\x8f\x8f\xf5\xdb\x89\x0f\x59\xdb\xe1\xfe\x8a\xd2\x5e\x13\xec\x39\x0f\xed\xe3\x90\x20\xe1\x0c\xb7\x75\xad\xb8\xf7\x97\x50\xb7\x2e\xbb\x5d\x64\x07\x95\xd9\xc4\x8b\x2d\x2e\xae\x89\xfd\x90\x15\x49\xe0\x82\xa6\x93\xde\x22\xdb\xb1\x5b\xed\xbc\x4e\xb2\xfc\x76\xa2\xd7\x4c\x21\x25\xb5\x96\x93\xc0\x50\x3e\xb8\xe8\xe0\xa8\x05\xcc\x17\xef\x0d\x7c\x6f\xa8\x3e\x09\xdc\x47\xda\x5e\x5d\x37\x04\xa9\xa5\xd7\x54\x55\xa2\x76\x35\xbf\xe8\x93\x05\x38\x52\xac\x16\x5e\x31\x13\x02\x36\x58\x26\x8c\x42\xe0\x2d\x5d\xd5\x07\xe9\xa1\x3a\xa3\xb0\x8b\xd0\x8b\x46\x34\x4d\x5b\x6d\x76\x13\x7a\xd1\xaf\x19\x5d\x4d\x03\xe6\x8d\xab\x77\xaa\x7a\xfa\xad\xcd\xdd\xea\x5f\x77\x67\xcf\x6d\x31\xab\xec\x69\x51\x26\x6b\x9c\xb9\x52\x93\x4c\xa0\x1d\xbb\x49\xdd\x99\x4c\x9f\x44\x0f\xa5\x49\xd0\x09\xf6\xb0\x26\x11\xfb\x90\xd0\x3c\xc1\x0c\x59\xcb\xb8\x6b\x3d\x68\x77\x07\x37\x76\x99\x36\x27\xe1\x1e\x4b\x03\xda\xb6\x02\x5d\x33\x10\x15\x12\x57\xfd\x5c\xff\x00\x2b\x5a\x72\x3d\xe9\x12\xc5\xee\x82\xdd\xb6\x63\x8c\xcd\x77\x3d\xd1\x6a\x2d\x1c\x8a\xda\x95\x60\x84\xd3\xfb\x17\xa7\x66\x3b\x7b\x42\x29\x6b\x6f\x28\x0f\x96\xa2\xea\xa9\xfd\xa7\x28\xf3\xd8\xdd\x26\xcc\x63\xfb\x57\x42\xff\x09\x00\x00\xff\xff\x2b\x00\xac\x58\x3c\x24\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 9276, mode: os.FileMode(420), modTime: time.Unix(1497815896, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


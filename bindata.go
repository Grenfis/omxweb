// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x1a\x6d\x6f\xe3\xb6\xf9\xfb\xfd\x0a\x56\xb9\x21\x0e\x1a\x4b\x8e\x2f\x19\x72\x8e\xed\x62\xbb\x76\xd8\x06\xac\x57\xe0\xae\x1f\x86\x62\x08\x68\x89\x8e\x79\xa1\x44\x4d\xa4\xec\xa4\x6d\xfe\xfb\x1e\x92\x12\x45\x51\xb2\xec\x2c\x77\x5d\x87\x00\xb1\x4c\x3e\x7c\xde\x5f\x29\xcf\xbf\xfa\xf6\xfd\xbb\x8f\xff\xfc\xe1\x3b\xb4\x91\x29\x5b\xbe\x9a\x9b\x0f\x84\xe6\x1b\x82\x13\xf5\x00\x8f\x29\x91\x18\x65\x38\x25\x8b\x60\x4b\xc9\x2e\xe7\x85\x0c\x50\xcc\x33\x49\x32\xb9\x08\x76\x34\x91\x9b\x45\x42\xb6\x34\x26\x63\xfd\xe5\x1c\xd1\x8c\x4a\x8a\xd9\x58\xc4\x98\x91\xc5\x45\x38\x39\x47\x29\x7e\xa0\x69\x99\xba\x4b\xa5\x20\x85\xfe\x8e\x57\xb0\x94\xf1\x00\x45\x5d\x8a\x38\xcf\x19\x19\xa7\x7c\x45\xe1\x63\x47\x56\x63\x58\x18\xc7\x38\x57\x67\x1c\x2e\x1e\x89\x68\x8e\x33\x9a\xdd\xa3\x4d\x41\xd6\x8b\x60\x23\x65\x3e\x8b\x22\xa0\x1e\x27\x59\xb8\xe2\x5c\x0a\x59\xe0\x5c\x7d\x89\x79\x1a\xad\xe1\xfc\x18\xef\x88\xe0\x29\x89\x2e\xc3\x69\x38\x89\x62\x21\x5a\xcb\x61\x4a\x01\x56\x00\xfa\x82\xb0\x45\x20\xe4\x23\x23\x62\x43\x88\x6c\xe8\x89\xb8\xa0\xb9\x44\xf2\x31\x07\x86\x25\x79\x90\xd1\x27\xbc\xc5\x66\x35\x40\xa2\x88\x0d\x1f\x02\x18\x89\x79\x42\xc2\x4f\xff\x2e\x49\xf1\xa8\x19\x30\x8f\xe3\x69\x78\x01\x7f\x8a\xd2\x27\x11\x2c\xe7\x91\x39\x5b\xa1\x97\x54\x32\xb2\xe4\xe9\x43\x41\x52\x2e\xc9\x3c\x32\x0b\xca\x4a\x51\x6d\xa6\xb9\xe6\xcb\x1c\x50\x36\x44\xbf\xe8\x47\xf8\x42\xe8\xdd\x46\xce\xd0\xc5\x64\xf2\x87\x1b\xbd\xf6\xf4\x4a\x7f\xac\x78\xf2\x68\xa1\x72\x9c\x24\x34\xbb\x9b\xa1\x49\xfe\x70\x53\xad\xa5\xb8\xb8\xa3\x59\x6b\xa9\x8b\x0c\x21\xad\xab\x35\x4e\x29\x7b\x9c\xa1\xbf\x12\xb6\x25\x92\xc6\xb8\xde\x5d\xe1\xf8\xfe\xae\xe0\x65\x96\xcc\xd0\xc9\x64\x32\x69\xb1\x40\xc3\x35\x1e\xe7\x0c\x77\xf8\x18\x33\xb2\x06\x32\xd7\x35\xe5\x0a\x3e\x5c\x95\x52\xf2\xcc\x42\xc7\x65\x21\x78\x31\x43\x39\xa7\xe0\x06\x45\x4d\x33\xe6\x4c\xad\x9e\x5c\x5e\x5e\xf6\x1d\x0f\x71\x2c\xe9\x96\x34\x58\x2a\xf0\xf5\x7a\x8d\xbe\xa2\xa9\x72\x6f\x9c\x49\xef\x64\xc1\x77\xa2\x39\x92\x50\xa1\xd8\x9e\xa1\x8c\x67\xa4\x26\xfb\xf3\x98\x66\x09\x79\x00\xed\xf4\x9e\x2d\xd9\xf3\xb4\xdd\x3d\xce\xe8\x73\xed\xc5\xa8\x90\x63\xed\x19\x63\xe5\x9c\x6d\x7e\x9b\x4d\x7f\x3d\x23\x63\x6b\xe9\xf0\x8a\xa4\xd6\x98\xbc\x48\x20\x64\x57\x1c\xd4\x98\xc2\x5e\xfe\x80\x04\x67\x34\x41\x27\xd3\xe9\xf4\xc6\x67\xed\x62\x0a\xfb\xd7\x0d\x33\xda\x51\x04\xfd\x99\x28\xac\x17\x35\xd6\x5e\x31\x69\xc7\x38\x57\x57\x57\x6d\x39\xc7\x85\x61\xf0\xb2\x21\x60\xad\x42\x33\x2d\xc3\x8a\xf1\xf8\xbe\xde\xd4\x99\x69\x86\xa6\x8e\x76\x54\xa4\x8e\x31\xa3\x77\xa0\xb4\x98\x34\x1e\xd4\xcb\x12\xb6\x2c\xe9\x63\x09\x89\x79\x81\x25\xe5\x59\x5b\x79\x35\xbf\x18\xdb\x10\xd8\x6d\xa8\x24\x63\x91\xe3\x58\x2b\x7a\x07\xe9\xa7\xde\xe2\x5b\x52\xac\x19\xdf\xcd\xd0\x86\x26\x09\xc9\x5a\x9c\x35\x9b\x84\x31\x9a\x0b\x2a\x3a\x82\x3a\x12\xd6\x4c\xab\x8c\x58\x70\x26\x86\x7d\x35\xe7\x82\x1a\xe6\x21\xa9\x61\x15\x0e\x9e\x9e\xdc\x08\xef\x8b\x7a\xeb\xec\xd3\x3d\xe4\x1d\x5f\xb5\xb4\xf0\x0a\xdc\xa5\x94\x96\x96\xe4\xf9\x0c\x5d\x01\x52\x64\xe2\xfd\xaa\xc1\xaf\x52\xfd\x3d\x95\x63\x48\xd6\x99\x58\xf3\x02\xdc\x4d\x3f\x02\xb3\x64\x34\x06\xc0\x73\xa4\xfe\x9f\xed\xa1\x1e\x16\x64\x07\x0c\xf6\xf0\xb0\xa6\x0f\x24\x69\x31\x30\xf1\xe5\x9c\x36\x6c\x74\xb4\xb1\x97\x92\x9f\x9b\x0e\x6a\xf8\x6a\x58\xc1\x60\x79\x0c\x4b\x4a\x31\x87\xfc\xb5\x15\x5a\x53\x37\x5c\x1f\xd4\xa2\x0e\x46\x1b\xba\x0f\x7b\x82\xf9\xb2\x09\x66\x9b\xa6\xbd\xf4\x6d\x83\x7c\x40\x09\x00\xbf\xc3\x45\x02\x05\x41\x48\xab\x8b\x8a\x54\x15\xb1\xd3\x1e\x4a\xfb\x31\x82\xed\xf7\x22\x34\x5e\x73\x1c\xbe\x2d\x78\x5e\x4a\x0e\x39\x44\xad\x8d\x17\xfa\x44\x45\xec\xf7\xe2\x13\x6f\x9e\xe9\x13\x3a\x2c\x5e\xe6\x10\xb5\x06\xcc\xe7\xb8\xcc\x3f\x83\xed\x6a\x64\x09\xdf\x65\x2f\xf2\xad\x14\xd3\x3e\xa3\x74\x53\x83\x63\xf5\xda\x33\x9e\xe7\x08\x9a\x52\xd8\x6e\x71\xbe\x7c\x3a\x6c\xbc\x07\x97\x92\x7b\xec\x5e\xba\x32\x19\xdd\xe1\x84\x96\xa2\xed\x6a\xb6\x99\x68\xa1\xe8\xf1\x36\xd4\x75\xb7\x4b\xcf\xdd\x36\x38\x51\x55\x8c\x66\x82\x48\x40\xa8\xfe\xde\x80\x9d\x4e\xae\xaf\xaf\xfd\xb2\x69\x97\x86\x54\x39\x5b\x11\x50\x41\x4f\x37\xd6\x2a\xf8\xd5\x68\x30\x43\xa7\xe8\xd4\xeb\x4d\x8c\x83\x1f\xb6\x5b\x9d\xcd\xbe\xa4\xed\xa6\x17\x57\xcf\x30\xde\xf4\x8b\x1b\xcf\xaf\x1f\x9f\xd3\x78\x56\x9f\x9d\x46\xb6\x8e\xdf\x4e\xc7\xef\xa3\xa8\xca\xc1\x17\xb4\xc8\xc5\xff\xd2\x20\xbf\xad\x3d\x6a\x65\x76\xcd\x61\x54\xf6\xc7\x23\xad\x51\x05\xe4\xf9\xb0\xd5\x7f\xb3\xb0\x15\xe5\x4a\x4f\xc8\xe2\x58\x2f\xd1\x43\x01\xaa\x4b\x48\xcf\xbc\x3b\x6c\xf8\x97\x84\x5b\x6b\xbe\x72\x8f\x68\x6e\x7c\x8b\xbe\x7d\xfb\xf6\x80\xe8\x20\xcf\xf3\xa4\xae\xea\xf0\xef\x43\x68\xb7\xb3\x39\x5a\x66\x9a\xad\xf9\x11\x32\x37\x05\xdc\x99\x8f\xff\x6f\x84\xef\x9d\xe3\x6a\x8d\xa4\x7c\x4b\x0f\x5c\x4e\x7c\xbe\x81\xef\xcd\x9e\x66\x70\xbd\x5e\xf7\x71\x15\xd2\x14\xdf\xd5\xcc\x3d\xe9\xff\x3d\xdb\x34\xbd\xb3\xfc\xef\x6d\xab\xaa\x13\x09\x91\x98\x3a\x03\xae\xbd\x70\x98\x76\xee\x4e\xbc\x13\xa1\x4e\x0b\xf6\xa0\xdb\x21\x4f\xbc\x7b\x8a\x5d\xa5\x82\x15\x67\x49\xdb\xea\x76\x62\xea\xd4\xaa\x8a\x9a\xfe\x18\xc7\x8c\xf7\x5d\x18\xb5\x72\x5d\x4b\x7f\x8e\xa9\x9d\x1b\xa9\x23\x6b\xc5\x00\xbb\x4d\xac\xd7\x4e\xef\xde\xef\x5c\xfa\xf7\x21\xfb\x2e\x36\xbc\xea\x76\xd9\x12\x7e\x1e\xd9\xeb\xc7\xb9\xba\x57\xac\x2e\x2e\x13\xba\x45\x31\xc3\x42\x2c\x02\x73\x97\x12\x2c\x2b\x6c\xf3\x92\x2d\xe7\x51\xc9\x2a\xc0\x08\x20\x97\xaf\x3a\x87\xea\x48\x6f\x8e\x39\x9b\x66\x40\xb4\x5b\x1e\x39\x33\x78\xa9\x9b\x3e\xf8\x68\x4d\xa5\x01\x4a\xb0\xc4\x8b\x40\x10\x72\x7f\xab\x76\x6e\xf5\xea\x72\x4e\xeb\xc3\x6b\x8c\xd6\x58\xc3\x8e\xeb\x93\xea\x4e\x96\x2e\x2b\x3e\x0f\x13\x74\x87\xd6\x16\xbd\x6a\x63\x88\x64\x05\xe2\x52\xac\xe8\xd5\x4a\x70\xb9\x70\x79\x50\xe9\x70\x8f\x3e\x9a\x92\x68\x38\xb4\x4c\xd5\xeb\xc1\xf2\xc3\x8f\x7f\xfe\x30\x20\xa0\xaa\x2c\x00\xf4\xf1\xfd\x0f\x03\x40\x2a\x15\x07\xcb\xbf\x7d\xff\x97\xf7\x47\xab\xca\x6a\xd8\x37\x4b\x57\x3d\x7d\xc6\xb0\x5a\x39\xc2\x1c\x7d\x96\xe8\x31\x42\x57\xff\x47\x90\x50\xd1\x5d\xe3\xcf\x71\x09\xae\x8e\x68\xb2\x08\x2a\x6d\x77\x88\x18\x90\x2e\x89\xbd\xb6\x35\xa3\xef\x51\xde\xae\xc7\x63\x67\x54\xae\xd9\x32\x4b\xb7\x7a\xa9\xc3\x90\x0b\xff\x3c\xc9\x61\xb4\xb7\x43\xbe\x47\x0a\x16\xf6\x11\xd2\x5b\x03\xd2\xef\x4b\x09\x3a\xb9\xf6\xe6\x03\x5d\x48\x14\x3d\x28\x25\xfa\x95\x8b\x7a\x3f\xb3\x57\x9f\x55\x49\xd8\xa3\x50\x1d\x13\xc1\x90\x0e\x12\x62\x5e\xd1\x18\xeb\x7a\x70\xb8\x7a\xf9\x74\x12\xb4\xd8\x36\x35\x21\x58\xbe\x53\x1f\xf3\x08\x1f\x12\x7b\xf0\xb5\x52\x7d\x78\x8b\x0b\xed\x7c\xa4\xf8\x20\xb1\x2c\x05\x5a\xa0\xac\x64\xec\xe6\x55\x5d\x1e\xca\xcc\xd8\x29\xe6\x69\x8a\xb3\x64\xa4\x5e\xab\x9d\xd9\xc2\x84\xd0\xeb\xf0\x8e\xc8\xbf\x7f\x78\xff\xfd\x28\x88\x2a\x98\x28\x40\x5f\xeb\xd7\x6f\xe7\xe8\x97\xa7\x73\x8b\x62\x54\x10\x91\xbb\x47\x75\xb7\x0e\x5d\x16\x09\x19\xbf\x33\xbb\x37\x76\xf3\xc9\x3e\x3f\x75\x78\x51\x0c\x8f\x72\x2c\x37\xfb\x18\xd1\xe1\x04\xd4\xd1\x9a\xaa\xd7\x13\x0a\x14\x0d\x73\x42\xd7\x48\xaf\x42\xf7\x1f\xc7\x44\x88\xf6\x2e\x02\x37\x05\xd7\x24\x46\x47\x23\x87\xcd\xba\x29\x39\xc4\xb2\x29\x60\x5d\xa6\x47\x41\xc9\x82\xb3\x50\xbd\x73\x1b\x05\xc1\x99\xd5\x3b\x32\x4c\x2f\xcc\xc7\xaf\xbf\xa2\x20\x70\xf6\x5c\x59\xab\xd2\xa8\xa4\x55\xb0\x47\x49\x1b\x45\xe8\x4f\x49\x02\xbd\x9c\x2c\x0b\x93\x43\x11\x61\x24\x85\xc6\x40\x29\x62\x47\x10\xf4\x14\xa4\x40\x18\x70\x15\x6a\x31\xa1\x05\x89\x25\x2f\x1e\x3d\x8d\x69\x52\x5f\x2d\x80\x39\x5f\x5f\x54\x92\x54\xe8\x27\x23\x42\x08\x0d\x0c\x95\xc0\x2e\xc8\x68\x36\xc3\x9c\xe7\x6d\x4d\x9a\x8e\xe6\xb6\x12\xdc\x00\x7d\xe2\x34\x33\xa7\x5e\xb5\x20\x41\x71\x73\x06\xf1\x5f\xc5\xca\xe9\xc9\xa9\xc9\x1d\xa7\xca\xf7\x1a\x34\x5f\xa3\xe0\xb4\xc9\x21\xa7\x26\x87\x30\xb2\x25\x0c\x52\xc8\xa9\x4e\x21\x1a\x5a\x85\xd3\x3c\x02\x84\x60\x0b\x9c\xe7\x24\x4b\x3e\xf2\x51\xd0\xbc\xc2\x09\x3c\x93\x3b\x5f\x20\xe1\xa3\x11\x85\x89\x1a\x75\xf5\x8c\xb4\x03\x82\x30\x6a\xeb\x27\xfa\xaf\xb6\xb4\x2a\x44\x60\x4f\x81\x84\xea\x9f\xfa\xee\x89\x39\xac\x64\x8b\xa2\x96\xd5\x46\x5e\x9b\xd0\x53\x1b\x29\x58\xff\x3b\x2a\x37\xda\xc0\x9a\x3f\xae\x9e\xfa\x6c\x6c\xf2\x83\x52\xec\xad\x4a\x23\x35\xb3\x16\x14\x7d\x83\x02\xf8\x12\xa0\x19\x0a\xd4\x4e\x70\xd3\x39\x1c\x0b\x71\xab\xb5\xdf\x7b\x58\x17\x4c\x06\xbe\x66\x50\xc0\x37\xca\xd2\x1e\x2c\xca\xc8\x80\x00\x52\x62\x8f\x82\x1c\xfe\x16\x15\x1f\x5d\x4d\xd5\x18\x22\x41\x8a\x2d\xf9\x46\x41\x2d\x8e\xd2\x96\xef\x69\xea\x90\x46\xa6\x7c\x4b\xeb\x46\xbf\x1c\x35\x1b\x0d\x2b\x76\xd7\x6c\x68\x43\x75\xbd\x51\x6d\x35\x1a\x32\xfb\xca\x27\xd5\x7a\xcb\x2f\xd4\xde\x73\x9d\xd4\x3e\x0d\xe4\xa5\x76\x5e\xdb\x93\x4e\x85\xde\x0e\x0e\xa6\x73\xaf\x90\x28\x80\x96\xb9\x6c\x92\x2d\xca\x2c\x83\x99\xcb\xb7\xd2\x6b\x2b\x8d\x4a\x89\x34\x21\x7e\x7e\x50\x00\xb6\xab\x3f\x0b\xc5\x86\xef\x46\x7e\x66\xb0\x44\x64\x9a\xac\x6e\x71\x4e\x6f\xef\xc9\xe3\xbe\xf8\x51\x08\x75\xd7\xd9\x20\x6b\xbb\x42\xff\x33\x61\xce\x70\xd6\xc3\x7b\x1f\x2e\x8f\xf7\x3e\xf1\xaa\x22\xf1\x5f\x98\xb1\x1a\x10\xff\xa1\xfa\x04\x1d\x0f\xae\xa8\x2a\x80\x74\x7b\xf3\x63\xc1\x54\x08\xd4\x3f\x26\xd1\x6b\x5a\x4d\x21\x2f\xee\x22\x19\xe5\xd1\x0e\xc6\xf3\xa8\x76\x64\xc8\xd0\x02\x26\x45\x9d\x49\xdd\xe2\x03\x82\x98\x59\x15\x7a\x25\xe5\x8a\x52\x16\xa3\x00\x7a\x26\x70\x90\x9a\x8c\x23\x42\x03\x6e\xe6\x67\x38\xa1\x9a\x11\xcd\x25\xd0\xa5\x30\x64\x62\x76\xab\xb7\xfa\x4f\xb9\xbd\x52\xeb\xec\x16\x22\x99\x92\xdd\x99\xc7\xdb\x80\x92\x2d\xd6\x8e\x8d\xba\x2a\x05\xf7\x37\xea\xa4\xc9\x39\x4a\x49\x42\x4d\x60\xfb\x8a\x85\x0a\x89\x53\xe5\xed\xae\x3b\x54\x5e\x37\x6b\x45\x44\xcb\x21\x1b\xab\xf6\x97\xf5\xda\x46\x00\x1e\x42\xaa\xd6\x4c\x57\x76\x7a\xa3\x0d\xd4\x70\x64\x13\xbf\x62\xd4\xb0\x33\x18\xa5\x2d\x5f\x79\x46\xd7\x25\x08\x2e\xe2\x8d\x39\xe6\x77\x81\x2f\xd0\xc4\xb9\x03\xad\x7f\xcd\x34\xd3\xc9\xf2\x45\x0a\x32\xac\x46\x69\xc9\x24\x0d\x8e\x52\x4a\x93\x35\xb8\x04\x77\x84\x47\x38\x2b\xd0\x12\x4d\xfa\x3a\x9b\x2a\xb9\x85\x15\xd8\x4f\x13\xaf\xb2\x37\xbe\x03\xc0\xa1\xb2\x8b\x7e\x70\xbc\xe8\xe8\x10\x7f\x3d\xb2\x5c\xbb\x9c\xf8\xfd\x68\xcb\xc5\xf5\xb0\x7d\x16\xc2\x91\x20\x66\x14\x66\x61\x47\x74\xbf\x01\x37\x5d\xbd\x99\xcf\x5b\x5c\xa9\xeb\x11\xbe\x83\xd6\x3c\xd6\xd7\x39\x20\x2b\xe3\x38\x19\x79\xce\xd2\xa2\x5b\x8d\xab\xcf\xa2\xfc\x7a\x24\x37\x54\xd4\x59\x44\x05\x76\x70\xd6\xe2\xa3\x06\x50\xbf\x5e\xdb\x92\x77\xaa\x50\x8e\x02\xf3\x1b\x2c\xaf\x2b\x54\x36\xac\xa1\x37\x58\x54\xa0\x7a\x16\x38\xf3\xad\x48\x54\x26\xac\x81\xd7\x54\xa9\x80\x76\x9a\x4c\x85\x90\x30\x07\x57\xf5\x7b\xb3\x2e\x3a\x85\xb0\xcd\xa1\x05\x0d\x71\x92\x38\x6b\x7a\x72\x1f\x28\x33\xbd\xc5\xa5\x1f\xbd\x41\xe5\xe1\xd7\x34\x8f\xa9\x62\x1d\xeb\x55\x75\xf0\x08\xdb\xb9\x99\xa0\x15\xd7\x3a\x2d\x0c\x38\x88\x3b\xc7\x1e\x45\xc9\x4d\xd8\xdd\x8a\xb9\xa7\x1d\x68\xc8\xb7\xa9\x9b\x8b\x87\x8a\xb0\xe4\x65\xbc\x81\xc6\xa6\x90\x28\xe5\xa0\x48\x7d\x75\x31\xc0\x47\xe5\xa5\x56\xd7\x8d\x07\xee\x95\xb6\x4b\x0f\x5a\x36\xa4\x1f\x62\x9c\xc5\xe0\x82\x9a\x72\x99\x1f\xa6\xbb\xc7\xf9\xf7\x91\x56\x97\xa8\x9e\x82\x03\xec\x52\x21\x6d\x32\x24\xcc\x0b\x18\x8a\x32\xf9\x2d\x59\x63\xc8\x68\x5e\x53\x65\xb2\xbb\x9e\xca\xfa\xc2\xf5\xc6\x03\xad\x46\x85\x2e\xa8\x6e\x94\x7b\x82\x76\xb8\x77\x6f\xa6\xfd\xfe\xa4\xd9\x1b\x31\xee\xbc\x7d\x30\xd7\x56\x4f\xee\xef\x66\xe7\x91\xb9\x88\x9e\x47\xfa\x27\xcd\xff\x09\x00\x00\xff\xff\xd5\x07\x8e\x6c\xe9\x2c\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 11497, mode: os.FileMode(420), modTime: time.Unix(1491532517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


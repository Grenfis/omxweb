// Code generated by go-bindata.
// sources:
// static/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x6d\x6f\x1b\xb9\x11\xfe\x9e\x5f\x31\xc7\x24\xb0\x84\xf3\xee\xca\x3e\xbb\x68\x64\x49\x87\xf6\xee\x80\xa2\x1f\x9a\x03\x92\x7e\x28\x8a\xc2\xa0\x76\x67\x2d\xc6\x5c\x72\x4b\x72\x25\xf9\x72\xfe\xef\x05\xc9\x7d\xdf\x95\x2c\x21\xcd\xf5\x8a\x00\xd1\x8a\x2f\x33\xcf\x3c\xf3\x70\x48\xae\xbc\xf8\xe6\xc7\xf7\x3f\x7c\xfc\xc7\xcf\x3f\xc1\xc6\x64\x7c\xf5\x6a\xe1\x3f\x00\x16\x1b\xa4\x89\x7d\x00\x58\x64\x68\x28\x08\x9a\xe1\x92\x6c\x19\xee\x72\xa9\x0c\x81\x58\x0a\x83\xc2\x2c\xc9\x8e\x25\x66\xb3\x4c\x70\xcb\x62\x0c\xdc\x97\x4b\x60\x82\x19\x46\x79\xa0\x63\xca\x71\x79\x15\xce\x2e\x21\xa3\x7b\x96\x15\x59\xbb\xa9\xd0\xa8\xdc\x77\xba\xe6\xb8\x14\x92\x40\x34\xf4\x48\xf3\x9c\x63\x90\xc9\x35\xe3\x18\xec\x70\x1d\xd0\x3c\x0f\x62\x9a\xdb\x39\x2d\x14\x4f\xa8\x9b\xe9\x9c\x89\x47\xd8\x28\x4c\x97\x64\x63\x4c\x3e\x8f\xa2\x8c\xee\xe3\x44\x84\x6b\x29\x8d\x36\x8a\xe6\xf6\x4b\x2c\xb3\x28\x95\xc2\x04\x74\x87\x5a\x66\x18\xdd\x84\xd7\xe1\x2c\x8a\xb5\xee\x34\x87\x19\x13\x61\xac\x35\x01\x85\x7c\x49\xb4\x79\xe2\xa8\x37\x88\xa6\xf1\xa7\x63\xc5\x72\x03\xe6\x29\xc7\x25\x31\xb8\x37\xd1\x27\xba\xa5\xbe\x95\x80\x56\xb1\xc7\xa1\xe7\x51\x14\xcb\x04\xc3\x4f\xff\x2e\x50\x3d\x39\x00\xfe\x31\xb8\x0e\xaf\xc2\x2b\xe7\xe9\x93\x26\xab\x45\xe4\xe7\x96\xe6\x0d\x33\x1c\x57\x32\xdb\x2b\xcc\xa4\xc1\x45\xe4\x1b\x6c\x96\xa2\x2a\x4d\x0b\x87\xcb\x4f\xb0\x39\x84\xcf\xee\x11\x60\x83\xec\x61\x63\xe6\x70\x35\x9b\xbd\xbd\x73\x6d\xcf\xaf\xdc\xc7\x5a\x26\x4f\xf5\xa8\x9c\x26\x09\x13\x0f\x73\x98\xe5\xfb\xbb\xb2\x2d\xa3\xea\x81\x89\x4e\xd3\xd0\x18\x80\xe3\x2a\xa5\x19\xe3\x4f\x73\xf8\x0b\xf2\x2d\x1a\x16\xd3\xaa\x77\x4d\xe3\xc7\x07\x25\x0b\x91\xcc\xe1\x75\x9a\xa6\x55\x7b\x2c\xb9\x54\x73\x78\x3d\x9b\xcd\x3a\xa8\x58\x98\xd2\x20\xe7\x74\x00\x2d\xe0\x98\x9a\x39\xfc\xb1\x02\x53\x8e\x0f\xd7\x85\x31\x52\xd4\xa3\xe3\x42\x69\x6b\x38\x97\x4c\x18\x54\x7d\x77\x37\x37\x37\x63\xd3\x43\x1a\x1b\xb6\xc5\xc6\x4a\x83\x0e\xbe\x61\x99\x55\x3c\x15\xa6\x37\x53\xc9\x9d\x6e\xa6\x24\x4c\x5b\xd8\x73\x10\x52\x60\xe5\xf6\x97\x80\x89\x04\xf7\x73\xb8\x1a\x9d\x5b\xf0\xf3\x12\x30\x9c\xce\xd9\xb9\x29\xe4\x4c\x9b\xc0\x89\x25\xb0\x7a\xed\xe2\x6d\x3a\xfb\xed\x02\x83\x3a\xf9\xe1\x2d\x66\x75\x7e\xa5\x4a\x50\x05\x6b\x69\x8c\xcc\xe6\x70\x95\xef\x41\x4b\xce\x12\x78\x8d\x58\x4f\xaf\xa1\x5d\x5d\xe7\xfb\x26\x85\xa5\x76\x34\xfb\x05\xad\xd5\xab\xca\xea\x68\x98\x6c\x2c\x39\xdd\x38\x03\xe5\x01\xde\x34\x0e\xea\xac\x30\xe1\x62\x58\x73\x19\x3f\x56\x9d\xae\x58\xcd\xe1\xba\xc5\x8e\x5d\xbc\x01\xe5\xec\x41\xcc\x21\xc6\x46\x41\xa3\x90\x68\x0d\xc9\x4d\x4b\x30\x96\x8a\x1a\x26\x45\x97\xbc\x11\xbc\xbb\x0d\x33\x18\xe8\x9c\xc6\x8e\xe8\x9d\xa2\x79\xd5\x25\xb7\xa8\x52\x2e\x77\x73\xd8\xb0\x24\x41\xd1\x41\xd6\x74\x22\xe7\x2c\xd7\x4c\x0f\x02\x6d\x45\x58\x81\xb6\x45\x52\x49\xae\x8f\x6b\x35\x97\x9a\x79\xf0\x0a\x39\xb5\xcb\xa1\xc7\x53\x7b\xd1\x8f\x15\x82\x5a\xec\xd7\x07\xdc\xb7\xb4\x5a\xfb\xa2\x6b\x2d\x79\x61\x6a\x5f\x46\xe6\x73\xb8\x9d\xbd\xbd\x03\xbf\xde\x6f\x1b\xfb\xb6\xfa\x3f\x32\x13\x18\x45\x85\x4e\xa5\xca\xe6\xe0\x1e\x39\x35\x38\x09\x6e\x67\x6f\x2f\xc1\xfe\x3f\x3d\xe0\x3d\x54\xb8\x63\x22\x19\xc1\x90\xb2\x3d\x26\x1d\x00\xb3\x7e\x9c\xd7\x0d\x8c\x01\x1b\x07\x3d\xf5\x6b\xd3\x8b\x0c\xdf\x1e\x27\x38\xe5\x92\x9a\xb9\x23\xe6\x25\xbd\x76\x96\xd6\x75\x7b\xb9\xee\x6d\xa3\x5b\x8c\xf5\xd2\xdd\xbf\xbc\x98\xd7\xeb\xf5\x68\x45\xaf\x17\xf9\x11\x12\x68\xfc\xb8\xa3\x2a\x09\x52\xaa\x4d\xcd\x45\xe9\xaa\x5c\xb1\xb3\x11\x4f\x87\x2d\xa6\x52\x1d\x34\xe8\x55\x33\x86\x7c\x68\x6f\x2b\x79\x91\xe1\x4b\x82\xa8\xd8\xf8\x42\x4d\x94\xce\x7e\x2f\x9a\xf8\xee\x4c\x4d\xb8\x65\xf1\x65\x82\xa8\x18\xf0\x9f\x41\x91\x8f\xe7\xee\x34\x2d\xf4\x8c\x25\x72\x27\x0e\x68\xeb\x34\x2d\x64\x94\x8d\x25\x65\x58\x1a\x5a\x59\xaf\x94\x71\x9e\x10\x9c\xa7\xb0\x7b\xc4\xf9\xfa\xe5\xb0\x51\x0f\x2d\x8c\xec\xc1\xbd\x69\xc7\xe4\xb9\xa3\x09\x2b\x74\x57\x6a\xf5\x61\xa2\x63\x62\x44\x6d\x30\x94\xdb\x4d\x4f\x6e\x1b\x9a\xd8\x5d\x8c\x09\x8d\x06\x66\xee\xdf\x77\xf9\xbe\xb3\x47\x1e\x3a\x21\x8e\x52\x39\x5f\x63\x2a\xd5\xc8\x69\xac\xb3\xe1\x97\xb7\x85\x39\x5c\xc0\x45\xef\x6c\x52\x0a\xfc\xc5\xbc\x55\xd5\xec\x6b\xe6\xee\xfa\xea\xf6\x8c\xe4\x5d\x7f\xf5\xe4\xf5\xf7\x8f\xff\x66\xf2\x6a\x3e\x07\x07\xd9\x6a\xfd\x0e\x4e\xfc\x7d\x13\xe5\x76\xf0\x15\x33\x72\xf5\xbf\x4c\xc8\x6f\x9b\x8f\x8a\xcc\x61\x3a\x3c\x65\x7f\x38\x31\x1b\xe5\x82\xbc\x3c\x9e\xf5\xdf\x6c\xd9\xea\x62\xed\x2e\xcd\xfa\x54\x95\xb8\x4b\x01\xa8\x6a\xa7\x1f\x5e\x81\x8f\x27\xfe\x4b\x96\x5b\xe7\x7e\xd5\x9e\xe2\xd0\xf4\x33\xfa\xee\xdd\xbb\x17\x42\x37\x32\x3f\x2f\x6a\x9f\xe9\xdf\x49\xd0\xed\x93\xcd\xc9\x31\x33\x91\xca\x13\x62\x6e\x36\xf0\xd6\xfd\xf8\xff\x26\xf8\xd1\x7b\xdc\xb3\x7b\x2b\x54\xbf\x0c\x5a\xac\x65\xf2\x54\xbe\x46\x4a\xd8\x16\x62\x4e\xb5\x5e\x12\x7f\x8d\x25\xab\xd2\xce\xa2\xe0\xab\x45\x54\xf0\x72\x60\x94\xb0\xed\xea\xd5\x60\x52\x45\x72\x33\xad\xd5\xe9\xcf\xe6\x75\x57\xcf\x9d\x3f\xf3\xd2\xd8\xa6\x01\x3a\x17\x02\x02\x09\x35\x74\x49\x34\xe2\xe3\xbd\xed\xb9\x77\xad\xab\x05\xab\x26\xa7\x14\x52\xea\xc6\x06\xd5\x4c\xb2\x5a\x44\x6c\x55\xe2\x7c\xd9\x61\xfb\xbe\xd0\xf1\x57\x76\x1c\x73\x59\x0e\x69\x7b\x2c\xfd\x55\x24\xb4\x51\xb4\x31\x58\x25\x1e\xe0\xa3\xa9\x46\x1e\x61\x0d\xaa\x6a\x27\xab\x0f\x7f\xff\xf3\x87\x23\x01\xda\x45\x4d\x56\x1f\x3e\xbe\xff\xf9\x64\x16\x6a\xf2\xfa\x8c\x0f\x23\x1f\xe3\xb9\x0e\xf8\x04\xa6\xc7\x48\x1e\xe1\x77\x48\xed\x09\x2e\xac\xe0\x2b\xfb\x39\x2d\x34\x12\x60\xc9\x92\x94\x44\x0e\x9c\xf8\x21\x43\x17\x07\xd3\xe6\x2f\x14\x27\x09\xd9\x5d\x3a\x5a\x17\x90\x0a\x96\x6f\xba\x77\x4d\x03\x40\xed\xf1\xe7\x45\x5e\xe4\x50\x5f\x9d\x7a\xae\x8a\xfc\xa0\x23\xd7\x75\x24\xfa\xce\x6a\x3f\xfa\x22\xbb\x9a\xbc\xa5\xca\x65\x01\xd5\x07\x43\x4d\xa1\x61\x09\xa2\xe0\xfc\xee\x55\x55\xd8\x0a\xe1\x01\xc7\x32\xcb\xa8\x48\x26\x82\x66\x38\xad\xcb\x31\xc0\x9b\xf0\x01\xcd\x5f\x3f\xbc\xff\xdb\x84\x44\xe5\x98\x88\xc0\xb7\xee\x85\xff\x25\x7c\x7e\xbe\xac\x4d\x4c\x14\xea\xbc\x3d\xd5\x1d\x06\xb4\xe4\x18\x72\xf9\xe0\x7b\xef\xea\xce\xe7\xfa\xf9\x79\x80\xc5\x02\x9e\xe4\xd4\x6c\x0e\x01\x71\xba\xba\x84\xcf\x90\x32\x8e\x73\xb0\x43\xe1\x38\x12\x96\x82\x6b\x0d\x75\x11\xc7\xa8\x75\xb7\x17\xa0\xc8\x13\x6a\xd0\x73\x34\x69\xc1\xf4\x45\xfa\x65\xc8\xbe\x48\x0f\x41\x4f\x48\xc1\xc9\x34\xdc\x98\x8c\x4f\x08\x99\xd6\xbc\x83\x07\xbd\xf4\x1f\xbf\xfe\x0a\x84\xb4\xfa\xda\xb1\x96\xe5\xdf\x46\x6b\xc7\x9e\x14\x6d\x14\xc1\x9f\x92\x04\x14\x9a\x42\xf9\x62\x02\xc8\x31\x43\x61\x2c\x11\x3b\x84\x42\x24\xa8\x80\x42\x4e\x95\x6d\x4c\x98\xc2\xd8\x48\xf5\xd4\x63\xcc\xb9\xfa\x66\x09\x84\xf4\xf9\x62\x06\x33\xed\x9e\x7c\x08\xa1\xce\x39\x33\x13\x12\x91\xe9\x9d\xef\x0c\x73\x99\x77\x99\xf4\x6f\x1f\xee\xcb\xc0\xfd\xa0\x4f\x92\x09\x3f\xeb\x55\x67\xe4\x9b\x09\x59\x70\xb6\x5a\x50\xff\xd3\xd0\xc5\xeb\x0b\xbf\x88\x2e\xac\xf6\x1a\x33\xdf\x02\xb9\x68\x16\xd3\x85\x5f\x4c\x1c\xb7\xc8\x83\x22\xbf\x70\x6b\xc9\x8d\x5e\x44\x74\xb5\x88\x38\x5b\x91\x69\x48\xf3\x1c\x45\xf2\x51\x4e\x48\xf3\x86\x98\xf4\x52\xde\xfa\x92\x4a\x05\x13\x06\x4c\xc0\x90\x67\x70\x02\x84\xa5\xeb\xfa\x27\xfb\x57\x37\x5a\xbb\x44\x60\xe9\x86\x84\xf6\x3f\xfb\xbd\x17\xe6\x71\x92\x6b\x13\x55\xac\xf5\xca\xeb\x3a\x7a\xee\x1a\x8d\x22\xf8\x89\x99\x8d\x4b\xb0\xc3\x27\xed\xd3\x58\x8e\x7d\x7d\xb0\xc4\xde\xdb\x32\x52\x81\xad\x87\xc2\xf7\x40\x12\xa6\x08\xcc\x81\xd8\x1e\x72\x37\x98\x1c\x6b\x7d\xef\xd8\x1f\x9d\xec\x76\x0e\x9e\x60\x69\x82\x06\x29\xe3\xd9\x88\x15\x9b\x64\x58\x02\x79\x4d\x46\x08\x6a\xe1\x5b\x96\x38\x86\x4c\x55\x16\x22\x8d\x6a\x8b\xdf\xdb\x51\xcb\x93\xd8\xea\x2b\xcd\x4e\x72\xc6\xac\xb6\x1c\x37\xee\xb7\x17\xdf\xd1\x40\xa9\x7b\x7d\x87\x4b\xd4\x50\x8d\xb6\xab\x61\xc8\xf7\x5b\x4d\xda\xf6\x8e\x2e\x6c\xdf\xb9\x22\xad\x9f\x8e\xd4\xa5\x6e\x5d\x3b\x50\x4e\xb5\xeb\x26\x2f\x96\xf3\xde\x46\x62\x07\x74\xd2\x55\x17\x59\x55\x08\xc1\xc4\x43\x3f\x4b\x6f\xea\x68\x6c\x49\x64\x09\xf6\xeb\x83\x1d\x50\x9f\x5c\xa7\xa1\xde\xc8\xdd\xa1\x62\x0c\x80\xbc\xf5\x8b\xde\x88\x83\xe1\xec\x81\x83\x31\x0c\x65\x25\x3f\x9d\xeb\x37\x93\x9a\xb2\x76\xc0\xfd\x1d\xa5\xbd\x27\xb8\x7b\x1e\x99\x86\x52\x4c\x48\xcc\x59\xfc\x48\x5a\xbc\xf7\xb7\x50\xbf\x2f\xfb\x53\x64\x07\x95\x3d\xc4\xcb\x5d\xc8\x65\xec\x7e\xc8\x0a\x15\x72\x49\x93\x49\x6f\x93\xed\xf8\x2d\x4f\x5e\x67\x79\x7e\x33\x31\x1b\xa6\xa7\x21\x35\x46\x4d\x88\x95\x3c\x99\x76\x70\x54\x03\x14\x66\x72\x8b\x3f\x58\xa9\x4f\x88\xff\x91\xb6\x57\xd7\xad\x40\xaa\xd1\x1b\xaa\xcb\xa1\x6e\x37\x9f\xf6\xc5\x82\x1c\x96\xb5\xe9\x94\x59\x0a\xd8\x60\x9b\xb0\x06\x91\xb7\x6c\x95\x3f\x48\x0f\xcd\x59\x83\x5d\x84\xf5\xd0\x90\x26\x49\xab\xcd\x1d\x42\xa7\xfd\x9a\xd1\xb5\x34\x50\xde\xb8\x79\x6f\xaa\x67\xdf\xf9\x3c\x6c\xfe\xf9\x70\xf6\xfc\x11\xb3\xcc\x9e\x91\x45\xbc\xd1\x86\x2a\x03\x99\x2c\x34\xba\x43\xea\xc1\x64\xd6\x49\xac\xa1\x34\x09\x3a\xc3\x1f\x8a\x04\xdc\x43\x4c\x45\x8c\xdc\x7b\x2e\xf2\x97\xfd\x1e\xd0\xc6\x21\xd7\xf6\x26\xdc\x53\x29\xa1\x6d\x2f\xd8\x75\x83\x61\xae\x70\x8b\xc2\xfc\x88\x29\x2d\xb8\x99\x74\x85\xe2\x4e\xc1\xfe\xd8\x31\xa6\xe6\xbb\xde\xd0\x72\x2f\x1c\x0e\x75\x3b\xc1\x88\xa6\x8f\x6f\x4e\xcd\x71\xf6\x8c\x52\xd6\x3e\x50\xbe\x58\x8a\xca\xa7\xf6\x9f\xa2\x2c\x22\xff\x36\x61\x11\xb9\xbf\x12\xfa\x4f\x00\x00\x00\xff\xff\x2b\x00\xac\x58\x3c\x24\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 9276, mode: os.FileMode(420), modTime: time.Unix(1497815896, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

